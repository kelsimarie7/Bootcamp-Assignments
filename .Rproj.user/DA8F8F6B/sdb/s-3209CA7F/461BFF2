{
    "collab_server" : "",
    "contents" : "## This code will be used during the bootcamp to show examples for stats, plotting and simple simulations\n\n# initialize workspace\nrm(list=ls()) # clean workspace\ngraphics.off() # close all open plot windows\n\n# Load libraries\nlibrary('igraph') # library for network analysis\n\n# load data\niris=iris # this data is already in the computer's memory, but this line will show it in your 'environment' window \n\n# look at the data\nhead() # shows the first 6 lines of the data frame\nunique(iris$Species) # shows all the species \n\n# get the subset data from two species\nsetosa=iris[iris$Species=='setosa',] ## assign only the rows that belong to setosa and all the columns in the data frame to a variable named \"setosa\"\nvirginica=iris[iris$Species=='virginica',] ## assign only the rows that belong to virginica and all the columns in the data frame to a variable named \"virginica\"\n\n# plot the sepal lengths of  setosa and virginica\nwindows() # opens the figure in a new window. use the command quartz() for macs\npar(mar=c(4, 4, 3, 2)) # set the margins\nboxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot\n\t\tnames=c('Setosa','Virginica'),ylab=\"Sepal Length\", xlab=\"species\", # label the axes \n\t\tcol=c(\"hotpink\", \"plum\"), # set the colors of the boxplots\n\t\tlas=1, # set the numbers on the axis so that they are upright\n\t\tcex.axis=1.5,cex.lab=1.5) # make sure the fonts are large enough to read\n\n# are these two statistically different?\n# use a t-test:\nt.test(setosa$Sepal.Length, virginica$Sepal.Length) # this will display the result in the command line\n\n###############\n# Ex 1 (in class): now plot and compare two other measures on your own....\n###############\n\n# comparing means of more than two groups\n# plot all three species\nwindows() # open a new figure window\nplot(iris$Species, iris$Sepal.Length, # data to plot\n\t\tylab=\"Sepal Length\", # label axes\n\tcol=c(\"hotpink\", \"plum\", \"cornflowerblue\"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty\n\n# are these three statistically different?\n# run an ANOVA:\nanova1=aov(iris$Sepal.Length~iris$Species) # set up the statistical test\nsummary(anova1) # look at the results of the statistical test\nTukeyHSD(anova1) # examine each pair using a Tukey test\n\n## Add the results of the Tukey test to the plot:\n letters\npoints(c(1,2,3),c(9,9,9), # location of circles\n\t\tcex=10) # size of circles (default of points is empty circles - look up  in your R reference card what other shapes you can set using pch= )\n\n## are sepal and petal length correlated?\n# let's plot these first\nwindows() # set a new figure\nplot(iris$Petal.Length,iris$Sepal.Length, # data to plot \n\t\txlab='Petal length',ylab='Sepal length', # label your axes\n\t\tpch=16,las=1,cex.axis=1.5,cex.lab=1.5) # make the figure pretty\n\n# run a Pearson's correlation twindows() # open a new figure window\nplot(iris$Species, iris$Sepal.Length,ylab=\"Sepal Length\", # data to plot and label axes\n\t\tylim=c(4,10), # set the y limits to make space for stats test results\n\t\tcol=c(\"hotpink\", \"plum\", \"cornflowerblue\"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty\n# after you call plot you can add a various graphical features: \n# add letters above the boxes\ntext(c(1,2,3),c(9,9,9), # set the location of the letters \n\t\tc('A','B','C'), # set which letters to display  on the plot\n\t\tcex=2) # make sure they are large enough to read\n## add a legend to the plot:\nlegend(2,10, # set the location x, y \n\t\tunique(iris$Species), # text to display\n\t\ttext.col=c(\"hotpink\", \"plum\", \"cornflowerblue\"), #text color\n\t\tbty ='n') # remove outline of legend box\n# and just for fun...\n# add circles  around theest to see if traits are statistically correlated:\ncor.test(iris$Petal.Length,iris$Sepal.Length)\n\n## let's color code by species\n# set a vector with a different  color for each species that matches their order in the data frame\ncols=sub('setosa',\"hotpink\",iris$Species)\ncols=sub('versicolor',\"plum\",cols)\n\n\n## another shorter way:\ncols2=c(\"hotpink\", \"plum\", \"cornflowerblue\")[unclass(iris$Species)]\n\n# plot the correlation with color codes by species\nwindows()\nplot(iris$Petal.Length,iris$Sepal.Length, xlab='Petal length',ylab='Sepal length', # same as above...\n\t\tcol=cols, # add color\n\t\tpch=16,las=1,cex.axis=1.5,cex.lab=1.5) # same as above\n# add a legend:\nlegend(\"topleft\", legend=unique(iris$Species), text.col=c(\"hotpink\", \"plum\", \"cornflowerblue\"),pch=16, col=c(\"hotpink\", \"plum\", \"cornflowerblue\"))\n\n# is there a significant effect of species on the relationship between sepal and petal length?\n# set up a linear model with both petal length and species as effects:\nfit_with_sp=lm(Sepal.Length ~ Petal.Length + Species - 1, data=iris)\nsummary(fit_with_sp) # look at the results\n\n# add an interaction term:\nfit_with_sp_with_int=lm(Sepal.Length ~ Petal.Length * Species - 1, data=iris)\nsummary(fit_with_sp_with_int)\n\n# exploratory analysis...\nwindows()\nplot(iris, col=cols2, pch=16)\n\n################\n# Ex 2 (in class): \n# are Petal Length and Sepal width related? by species? is there an interaction term? \nwindows()\nplot(iris$Petal.Length,iris$Sepal.Width, xlab='Petal length',ylab='Sepal width', # same as above...\n     col=cols, # add color\n     pch=16,las=1,cex.axis=1.5,cex.lab=1.5)\nfit_with_sp_with_int=lm(Sepal.Length ~ Petal.Length * Species - 1, data=iris)\nsummary(fit_with_sp_with_int)\n# Plot the interaction term (HINT: look up the abline function).\n# next, use a 'for' loop to create the above plot.\n################\n\n## gradient colors - color code the points by petal length\nwindows()\nplot(iris$Petal.Length,iris$Sepal.Length, xlab='Petal length',ylab='Sepal length',pch=16, # same as above...\n\t\t col=rainbow(max(iris$Petal.Length)*10)[iris$Petal.Length*10]) # set a color Palette 'rainbow' and assign colors by petal length \n\n###########################\n###########################\n\n## interaction data:\n# create a random interaction matrix:\nmat_data=matrix(data =  rnorm(225,0,5) , nrow = 15, ncol = 15) ## you can potentially replace rnorm with rexp(225,0.75) and with runif(225,0,5) \ndiag(mat_data)=1 # set the diagonal to 1 cause each individual interacts with itself by definition\nwindows() # plot the interaction matrix\nimage(mat_data) \n# turn the adjacency matrix to a network object\nnet=graph.adjacency(mat_data,diag=FALSE,mode=\"undirected\", weighted=TRUE)\nE(net) # look at the edges of the object\nE(net)$width <- E(net)$weight # set edge width to the weight\nwindows() # plot the network\nplot(net,vertex.color=rainbow(10),layout=layout.fruchterman.reingold)\n\n\n###########################\n###########################\n\n# Geometric Growth \n# a script to simulate and plot the discrete logistic model\n# Set initial conditions and parameter values\nN0 <- 100\nRR <- 1.05\nttMax <- 10\n# initialize variable to a vector of NA values - where we will store the simulation results\nNN <- matrix(NA, nrow=1, ncol=ttMax+1)\nNN[1] <- N0 # set first value to initial condition\n# use a loop to iterate the model the desired number of times\nfor (tt in 1:ttMax) {\n\tNN[tt+1] <- RR*NN[tt]\n}\n# plot the results\nwindows()\nplot(1:(ttMax+1), NN, xlab=\"Time\", ylab=\"Population size (N)\", col='blue', pch=16, las=1)\n# add a line:\nlines(1:(ttMax+1), NN, xlab=\"Time\", ylab=\"Population size (N)\", col='blue', las=1)\n\n##################\n## ex 3 (in class): convert the above simulation into a function\n################\n\n#PLOTANDSTATSEXERCISE\n\nChickWeight=ChickWeight\ndata<-ChickWeight\ndata<-within(data, {\n  Chick<-factor(Chick)\n  Diet<-factor(Diet)\n  Time<-factor(Time)\n  \n  \n})\n  #~ notates independent and dependent variable\n\ndataTimeZero<-ChickWeight[data$Time==0,]\nboxplot(weight~Diet,data=dataTimeZero,xlab=\"Diet Type\",ylab=\"Weight\")\nanova1=aov(weight~Diet, data = dataTimeZero)\nsummary(anova1)\nTukeyHSD(anova1)\n\n#2\n\ndataTimeZero<-ChickWeight[data$Time==21,]\nboxplot(weight~Diet,data=dataTimeZero,xlab=\"Diet Type\",ylab=\"Weight\")\nanova1=aov(weight~Diet, data = dataTimeZero)\nsummary(anova1)\nTukeyHSD(anova1)\n\n#3\n\nsummary(aov(weight~Diet*Time+Error(Chick),data=data))\n#Error: Chick\n#Df Sum Sq Mean Sq F value   Pr(>F)    \n#Diet       3 155863   51954   6.795 0.000799 ***\n#Time       5  60748   12150   1.589 0.184743    \n#Residuals 41 313495    7646   \n\n#There is an effect of diet on chick \n\n#4\n\nplot(as.numeric(data$Time),data$weight,pch=19)\n\ncols<-sub('1','red',data$Diet)\ncols<-sub('2',\"green\",cols)\ncols<-sub('3',\"yellow\",cols)\ncols<-sub('4',\"blue\",cols)\n\nplot(as.numeric(data$Time),data$weight, xlab='Time', ylab='Weight', col=cols, pch=16,las=1,cex.axis=1.5,cex.lab=1.5)\n\n\nplot(as.numeric(data$Time),data$weight, xlab='Time', ylab='Weight', \n     col=cols, \n     pch=16,las=1,cex.axis=1.5,cex.lab=1.5) # same as above\n#5\n\nplot(NA, xlim=c(0,21),ylim=c(30,400))\n\ncolors=rainbow(50)\n\nfor(ID in 1:50) {\n  use.rows=ChickWeight$Chick==ID\n  lines (x=ChickWeight$Time[use.rows], y=ChickWeight$weight[use.rows],col=colors[ID]) }\n\n\n\n\n\n",
    "created" : 1473961669613.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2874432049",
    "id" : "461BFF2",
    "lastKnownWriteTime" : 1473985233,
    "last_content_update" : 1473985233422,
    "path" : "~/GitHub/Bootcamp-Assignments/code-for-lesson.R",
    "project_path" : "code-for-lesson.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}