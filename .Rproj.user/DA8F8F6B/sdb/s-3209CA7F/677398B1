{
    "collab_server" : "",
    "contents" : "for(ii in 1:9){cat(\"\\n\")ii),}\nii\nii<-1:9\nii\nfor(ii in 1:9){\n  cat(\"\\n\")\n  if (ii==9){\n    cat(\"*\")\n   }\n  }\n#n is enter  #need } before cat statment\n#exercise2\nfor(ii in 1:9){\n  cat(\"*\")\n  if (ii!=9){\n    cat(\"&\")\n  }\n}\n#exercise3\ndogs <- 10;\nfor (i in 1:5){\n  dogs <- dogs + 1; \n} \n#the initial is 10, the first loop adds 1 so 10+1=11,11+1=12, 12+1=13,13+1=14, 14+1=15 for the last loop\nmeatloaf <- 0; \nfor (i in 5:9){\n  meatloaf <- meatloaf - i + 1;\n  cat(meatloaf) \n#the first loop is 0-5+1= -4, -4-6+1=-9,-9-7+1=-15,-15-8+1=-22,last loop -22-9+1=-30\n  bubbles <- 12;\n  for (i in -1:-4){\n    bubbles <- i;\n  }\n  #first loop starts with 12 and becomes -1, then -2, -3, ends with -4\n  #Exercise4\n  years <- c( 2015, 2016, 2018, 2020, 2021)\n  for(ii in 1:length(years)){\n    if(years[ii] %% 2 == 0){\n      cat(years[ii], 'Hooray, congressional elections!', sep = '\\t', fill = T)\n      \n    } \n    if(years[ii] %% 4 == 0){\n      cat(years[ii], 'Yay, presidential elections!', sep = '\\t', fill = T)\n    }\n  }\n#Exercise5\n  bankAccounts <- c(10, 9.2, 5.6, 3.7, 8.8, 0.5);\n  interestRate <- 0.0125; compounded<- rep(1,6)\n  for (i in 1:length(bankAccounts)) {\n    compounded[i] <- interestRate*bankAccounts[i] + bankAccounts[i]; }\n  compounded\n\n#Exercise6\n  bankAccounts <- c(10, 9.2, 5.6); #define bank accounts here\n  interestRate <- 0.0525;   \n  house <- c(4.8, 3.8, 5.7); #deduct\n  food<- c(3.5, 4.3, 5.0);    #deduct\n  fun <- c(7.8, 2.1, 10.5);  #deduct\n  #and incomes (through TAships) of \n  income <- c(21, 21, 21); #add this\n  \n  for (j in 1:5) {\n    for (i in 1:length(bankAccounts)) {bankAccounts[i]-house[i]-food[i]-fun[i]+income[i]*(1+interestRate)\n      #step 1 modify bankAccounts so that amounts reflect income and expenses\n      #step 2 get calculate interest and add to accounts from step 1\n      #you can actually use the line you have already written if you\n      #modify amounts in bankAccounts directly in step 1\n    }\n#Exercise7\n\n    house <- c(4.8, 3.8, 5.7); \n    food<- c(3.5, 4.3, 5.0); \n    fun <- c(7.8, 2.1, 10.5); \n    \n    #and incomes (through TAships) of \n    \n    income <- c(21, 21, 21);\n    \nyears<- c(2015,2016,2017,2018,2019,2020)\n  for (j in 1:6) {\n  if (years[j]%%2==1) {\n    bankAccounts[1]=bankAccounts[1]+5000\n    bankAccounts[3]=bankAccounts[3]+5000\n\n    for (i in 1:length(bankAccounts)) {bankAccounts[i]-house[i]-food[i]-fun[i]+income[i]*(1+interestRate)     \n    }\n  }\n#Exercise8\n\nxsum<-0    \nx<-1\nwhile (x<=17){\n  (xsum=xsum+x)\n  x=x+1\n}\n\n#Exercise9\n\nfun<-function(x) {\n  if (x<=-1){\n    cat(\"small\")\n    }\nelse if (x>-1&&x<1){\n    cat(\"medium\")\n  }\nelse{\n  cat(\"big\")\n}\n}\n\n#plottingassignment begins here\n\nget_heights<-function(x){\n    heights<-rnorm(x,69,10)\n    return(mean (heights)) \n}\nmean_heights_100<-rep(0,1000)\nfor(i in 1:1000) \nmean_heights_100[i]<-get_heights(100)\n}\n\n    mean_heights_1000<-rep(0,1000)\n    for(i in 1:1000) {\n      mean_heights_1000[i]<-get_heights(1000)\n  }\n  \nbins<-seq(65,73,by=1)\n    counts_100<-hist(mean_heights_1000, breaks=bins)$counts\n    counts_100<-hist(mean_heights_1000,breaks = bins)$counts\n barplot(rbind(counts_100,counts_100),col=c(2,4),beside=T,names.arg = seq(65,72,by=1),xlab=\"average height\",ylab=\"count\")\n  legend('topleft',c('n=100','n=1000'),col=c(2,4),lwd=4)",
    "created" : 1473892455657.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "455799838",
    "id" : "677398B1",
    "lastKnownWriteTime" : 1474400384,
    "last_content_update" : 1474400384091,
    "path" : "~/GitHub/Bootcamp-Assignments/Assignment1-Day1.R",
    "project_path" : "Assignment1-Day1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}